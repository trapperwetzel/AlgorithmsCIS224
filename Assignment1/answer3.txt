
3(a)

n^2 + 5n + 8 <= n^2 +5n^2 + 8n^2 

n^2 + 5n +8 <= 14n^2 

This makes c = 14, n₀ = 1 

3(b) 
2n^3 - 4n + 3 <= 2n^3 - 4n^3 + 3n^3 
2n^3 + 4n + 3 <= 9n^3 
for all n >= 1

c = 9, n₀ = 1

3(c)

2^n+1 = 2 * 2^n
2^n+1 <= c * 2^n 
where c = 3

I choose 3 just because it made the graph on desmos easier to see. But it could also be c = 2
c = 3 
n₀ = 1


3(d)

(n^2 + 1)^3 <= (2n^2)^3 = 8n^6 for all n >= 1
c = 8 
n₀ = 1 

3(e) 
When you multiply a function by a constant, it doesn't really change the "growth rate"...
Showcasing a very imporant concept regarding Big O/Algorithms where we ignore constants as they do not matter in how we measure algorithms really.
You can see this in the example graph as even though I multipled the original function from 3(a) by 2, it is still growing behind y = 14n^2
Even if you multiply it by 6, 7, 8 etc, it will eventually  start growing slower then 14n^2. 

